"""
üéØ SipGate Call Analysis - Task & Appointment Extraction
========================================================

Analysiert Call-Transkripte und extrahiert automatisch:
- Tasks (Angebot erstellen, R√ºckruf, etc.)
- Termine (n√§chste Woche Montag 14 Uhr)
- Follow-Up-Reminder (in 3 Tagen zur√ºckrufen)
"""

import os
import re
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import pytz
from langchain_openai import ChatOpenAI
from langchain_core.messages import HumanMessage
from langchain_core.output_parsers import JsonOutputParser

# Deutsche Zeitzone
BERLIN_TZ = pytz.timezone('Europe/Berlin')

def now_berlin():
    """Return current datetime in Berlin timezone"""
    return datetime.now(BERLIN_TZ)


async def analyze_call_content(
    transcription: str,
    contact_name: str = "Unbekannt",
    duration_seconds: int = 0
) -> Dict:
    """
    Analysiert Gespr√§chsinhalt und extrahiert Tasks, Termine, Follow-Ups
    
    Args:
        transcription: Transkript des Gespr√§chs
        contact_name: Name des Kontakts
        duration_seconds: Dauer des Gespr√§chs
    
    Returns:
        {
            "tasks": [{"title": "...", "description": "...", "priority": "..."}],
            "appointments": [{"date": "...", "time": "...", "description": "..."}],
            "follow_ups": [{"action": "...", "due_date": "...", "reason": "..."}],
            "summary": "..."
        }
    """
    
    if not transcription or len(transcription.strip()) < 10:
        return {
            "tasks": [],
            "appointments": [],
            "follow_ups": [],
            "summary": "Kein Transkript verf√ºgbar"
        }
    
    # OpenAI Model
    llm = ChatOpenAI(
        model="gpt-4",
        temperature=0.3,
        api_key=os.getenv("OPENAI_API_KEY")
    )
    
    # Aktuelles Datum f√ºr relative Zeitangaben
    heute = now_berlin()
    heute_str = heute.strftime("%d.%m.%Y")
    wochentag = heute.strftime("%A")
    
    # Wochentage-Mapping
    wochentage_map = {
        "Monday": "Montag",
        "Tuesday": "Dienstag",
        "Wednesday": "Mittwoch",
        "Thursday": "Donnerstag",
        "Friday": "Freitag",
        "Saturday": "Samstag",
        "Sunday": "Sonntag"
    }
    wochentag_de = wochentage_map.get(wochentag, wochentag)
    
    prompt = f"""
Analysiere dieses Telefonat und extrahiere ALLE wichtigen Informationen:

KONTAKT: {contact_name}
DAUER: {duration_seconds} Sekunden
DATUM: {heute_str} (Heute ist {wochentag_de})

TRANSKRIPT:
{transcription}

AUFGABE:
Extrahiere aus dem Gespr√§ch:

1. TASKS (Konkrete Aufgaben die erledigt werden m√ºssen):
   - Angebot erstellen
   - Rechnung schicken
   - Unterlagen zusenden
   - Projekt pr√ºfen
   - etc.

2. TERMINE (Vereinbarte Termine):
   - "n√§chste Woche Montag 14 Uhr"
   - "morgen um 10"
   - "in 3 Tagen"
   - Berechne das EXAKTE Datum basierend auf Heute: {heute_str}

3. FOLLOW-UPS (R√ºckrufe/Erinnerungen):
   - "in 3 Tagen zur√ºckrufen"
   - "Status pr√ºfen n√§chste Woche"
   - "Angebot nachfassen"

4. ZUSAMMENFASSUNG (1-2 S√§tze)

Antworte NUR als JSON ohne zus√§tzlichen Text:
{{
  "tasks": [
    {{
      "title": "Kurzer Task-Titel",
      "description": "Detaillierte Beschreibung",
      "priority": "low" | "medium" | "high" | "urgent",
      "due_date": "YYYY-MM-DD" (optional)
    }}
  ],
  "appointments": [
    {{
      "date": "YYYY-MM-DD",
      "time": "HH:MM",
      "description": "Was ist der Termin",
      "location": "Wo" (optional)
    }}
  ],
  "follow_ups": [
    {{
      "action": "Was machen",
      "due_date": "YYYY-MM-DD",
      "reason": "Warum"
    }}
  ],
  "summary": "Zusammenfassung des Gespr√§chs"
}}

WICHTIG:
- Wenn keine Tasks/Termine/Follow-Ups: Leere Arrays zur√ºckgeben
- Datum MUSS berechnet werden (nicht "n√§chste Woche" sondern "2025-10-20")
- Priorit√§t MUSS gesetzt werden
"""

    try:
        # GPT Call
        messages = [HumanMessage(content=prompt)]
        response = await llm.ainvoke(messages)
        
        # Parse JSON
        result_text = response.content.strip()
        
        # Entferne Markdown-Codebl√∂cke falls vorhanden
        if result_text.startswith("```"):
            result_text = result_text.split("```")[1]
            if result_text.startswith("json"):
                result_text = result_text[4:]
        
        import json
        result = json.loads(result_text)
        
        # Validierung & Defaults
        if "tasks" not in result:
            result["tasks"] = []
        if "appointments" not in result:
            result["appointments"] = []
        if "follow_ups" not in result:
            result["follow_ups"] = []
        if "summary" not in result:
            result["summary"] = "Telefonat mit " + contact_name
        
        return result
        
    except Exception as e:
        print(f"‚ùå Error analyzing call content: {e}")
        return {
            "tasks": [],
            "appointments": [],
            "follow_ups": [],
            "summary": f"Fehler bei der Analyse: {str(e)}"
        }


async def extract_appointment_datetime(
    natural_language: str,
    reference_date: Optional[datetime] = None
) -> Optional[Dict[str, str]]:
    """
    Extrahiert Datum/Zeit aus nat√ºrlicher Sprache
    
    Beispiele:
    - "n√§chste Woche Montag 14 Uhr" ‚Üí 2025-10-20 14:00
    - "morgen um 10" ‚Üí 2025-10-14 10:00
    - "√ºbermorgen" ‚Üí 2025-10-15
    - "in 3 Tagen" ‚Üí 2025-10-16
    
    Args:
        natural_language: Text wie "n√§chste Woche Montag 14 Uhr"
        reference_date: Referenzdatum (default: heute)
    
    Returns:
        {"date": "2025-10-20", "time": "14:00"} oder None
    """
    
    if not reference_date:
        reference_date = now_berlin()
    
    text = natural_language.lower().strip()
    
    # Einfache F√§lle
    if "heute" in text:
        date = reference_date
    elif "morgen" in text and "√ºbermorgen" not in text:
        date = reference_date + timedelta(days=1)
    elif "√ºbermorgen" in text:
        date = reference_date + timedelta(days=2)
    else:
        # Komplexere F√§lle ‚Üí GPT
        try:
            llm = ChatOpenAI(model="gpt-4", temperature=0)
            heute_str = reference_date.strftime("%d.%m.%Y (%A)")
            
            prompt = f"""
Heute ist: {heute_str}

Wandle diese Zeitangabe in ein konkretes Datum um:
"{natural_language}"

Antworte NUR mit JSON:
{{"date": "YYYY-MM-DD", "time": "HH:MM"}}

Falls keine Zeit angegeben: "time": null
"""
            
            messages = [HumanMessage(content=prompt)]
            response = await llm.ainvoke(messages)
            
            import json
            result_text = response.content.strip()
            if result_text.startswith("```"):
                result_text = result_text.split("```")[1]
                if result_text.startswith("json"):
                    result_text = result_text[4:]
            
            result = json.loads(result_text)
            return result
            
        except Exception as e:
            print(f"‚ùå Error extracting appointment: {e}")
            return None
    
    # Zeit extrahieren (Regex)
    time_match = re.search(r'(\d{1,2}):(\d{2})', text)
    if time_match:
        time_str = f"{time_match.group(1).zfill(2)}:{time_match.group(2)}"
    else:
        time_match = re.search(r'(\d{1,2})\s*(?:uhr|h)', text)
        if time_match:
            time_str = f"{time_match.group(1).zfill(2)}:00"
        else:
            time_str = None
    
    return {
        "date": date.strftime("%Y-%m-%d"),
        "time": time_str
    }


async def calculate_follow_up_date(
    follow_up_text: str,
    reference_date: Optional[datetime] = None
) -> str:
    """
    Berechnet F√§lligkeitsdatum f√ºr Follow-Up
    
    Beispiele:
    - "in 3 Tagen zur√ºckrufen" ‚Üí 2025-10-16
    - "n√§chste Woche Status pr√ºfen" ‚Üí 2025-10-20
    - "morgen" ‚Üí 2025-10-14
    
    Args:
        follow_up_text: Text wie "in 3 Tagen"
        reference_date: Referenzdatum (default: heute)
    
    Returns:
        "YYYY-MM-DD"
    """
    
    if not reference_date:
        reference_date = now_berlin()
    
    text = follow_up_text.lower().strip()
    
    # Einfache Pattern
    if "morgen" in text:
        return (reference_date + timedelta(days=1)).strftime("%Y-%m-%d")
    
    # "in X Tagen"
    match = re.search(r'in\s+(\d+)\s+tag', text)
    if match:
        days = int(match.group(1))
        return (reference_date + timedelta(days=days)).strftime("%Y-%m-%d")
    
    # "n√§chste Woche" (7 Tage)
    if "n√§chste woche" in text or "n√§chster woche" in text:
        return (reference_date + timedelta(days=7)).strftime("%Y-%m-%d")
    
    # Default: 3 Tage
    return (reference_date + timedelta(days=3)).strftime("%Y-%m-%d")


# Test-Funktion
if __name__ == "__main__":
    async def test():
        # Test mit Beispiel-Transkript
        transcript = """
        Guten Tag Herr M√ºller, ja ich rufe an wegen dem Projekt Terrassendach.
        K√∂nnen Sie mir ein Angebot schicken? Und k√∂nnten wir n√§chste Woche Montag
        um 14 Uhr einen Termin f√ºr das Aufma√ü machen?
        Bitte rufen Sie mich in 3 Tagen zur√ºck wenn Sie das Angebot fertig haben.
        """
        
        result = await analyze_call_content(
            transcription=transcript,
            contact_name="Frank M√ºller",
            duration_seconds=180
        )
        
        print("üìû CALL ANALYSIS RESULT:")
        print(json.dumps(result, indent=2, ensure_ascii=False))
        
        # Test Appointment Extraction
        apt = await extract_appointment_datetime("n√§chste Woche Montag 14 Uhr")
        print(f"\nüìÖ APPOINTMENT: {apt}")
        
        # Test Follow-Up
        follow = await calculate_follow_up_date("in 3 Tagen zur√ºckrufen")
        print(f"\n‚è∞ FOLLOW-UP: {follow}")
    
    asyncio.run(test())
