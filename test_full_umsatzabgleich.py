#!/usr/bin/env python3
"""
üß™ VOLLST√ÑNDIGER UMSATZABGLEICH TEST
==================================

Test mit echten Bank-CSV Daten und automatischem Matching
"""

import sys
sys.path.append('/Users/cdtechgmbh/railway-orchestrator-clean')

from modules.database.umsatzabgleich import UmsatzabgleichEngine
import json

def test_full_umsatzabgleich():
    """üí∞ Vollst√§ndiger Umsatzabgleich Test mit CSV-Import"""
    
    print("üí∞ VOLLST√ÑNDIGER UMSATZABGLEICH TEST")
    print("=" * 60)
    
    # Umsatzabgleich Engine starten
    engine = UmsatzabgleichEngine()
    
    print("üì• 1. Bank-CSV Import...")
    imported_count = engine.import_bank_csv(
        csv_file_path="/Users/cdtechgmbh/railway-orchestrator-clean/sample_bank_data.csv",
        bank_format="sparkasse"
    )
    print(f"‚úÖ {imported_count} Bank-Transaktionen importiert")
    
    print("\nü§ñ 2. Automatisches Rechnungs-Matching...")
    match_results = engine.auto_match_transactions()
    print(f"‚úÖ {match_results['matches_found']} von {match_results['total_transactions']} automatisch gematcht")
    print(f"‚ö†Ô∏è {match_results['unmatched']} Transaktionen ungematcht")
    
    print("\nüìä 3. Umsatzabgleich Report (Oktober 2025)...")
    report = engine.get_umsatzabgleich_report("2025-10-01", "2025-10-31")
    
    print(f"üìÖ Zeitraum: {report['period']}")
    print("\nüí≥ BANK-TRANSAKTIONEN:")
    for trans_type, data in report['bank_transactions'].items():
        print(f"  {trans_type.upper()}: {data['count']} √ó ‚Ç¨{data['total']:,.2f}")
    
    print("\nüìÑ RECHNUNGEN:")
    for invoice_type, data in report['invoices'].items():
        print(f"  {invoice_type.upper()}: {data['count']} √ó ‚Ç¨{data['total']:,.2f}")
    
    print("\nüîç ABWEICHUNGSANALYSE:")
    variances = report['variances']
    print(f"  üìà Einnahmen-Abweichung: ‚Ç¨{variances['income_variance']:,.2f}")
    print(f"  üìâ Ausgaben-Abweichung: ‚Ç¨{variances['expense_variance']:,.2f}")
    print(f"  üí∞ Netto-Abweichung: ‚Ç¨{variances['net_variance']:,.2f}")
    
    print(f"\nüìä MATCHING-RATE:")
    matching = report['matching_rate']
    print(f"  ‚úÖ {matching['matched_transactions']} von {matching['total_transactions']} Transaktionen gematcht")
    print(f"  üìä Matching-Rate: {matching['matching_percentage']:.1f}%")
    
    # Kritische Punkte identifizieren
    print("\nüî¥ KRITISCHE PUNKTE:")
    if abs(variances['income_variance']) > 100:
        print(f"  ‚ö†Ô∏è Hohe Einnahmen-Abweichung: ‚Ç¨{variances['income_variance']:,.2f}")
    
    if abs(variances['expense_variance']) > 100:
        print(f"  ‚ö†Ô∏è Hohe Ausgaben-Abweichung: ‚Ç¨{variances['expense_variance']:,.2f}")
    
    if matching['matching_percentage'] < 80:
        print(f"  ‚ö†Ô∏è Niedrige Matching-Rate: {matching['matching_percentage']:.1f}%")
    
    if report['unmatched_transactions'] > 0:
        print(f"  ‚ö†Ô∏è {report['unmatched_transactions']} ungematcht Transaktionen")
    
    print("\nüéØ GESCH√ÑFTSANALYSE:")
    bank_net = report['bank_transactions'].get('income', {}).get('total', 0) - report['bank_transactions'].get('expense', {}).get('total', 0)
    invoice_net = report['invoices'].get('outgoing', {}).get('total', 0) - report['invoices'].get('incoming', {}).get('total', 0)
    
    print(f"  üí∞ Bank Netto-Cash Flow: ‚Ç¨{bank_net:,.2f}")
    print(f"  üìÑ Rechnungen Netto-Flow: ‚Ç¨{invoice_net:,.2f}")
    print(f"  üéØ Differenz: ‚Ç¨{bank_net - invoice_net:,.2f}")
    
    if bank_net > invoice_net:
        print("  ‚úÖ Bank-Flow h√∂her als Rechnungen (zus√§tzliche Einnahmen?)")
    elif bank_net < invoice_net:
        print("  ‚ö†Ô∏è Bank-Flow niedriger als Rechnungen (ausstehende Zahlungen?)")
    else:
        print("  üéØ Perfect Match - Bank und Rechnungen stimmen √ºberein!")
    
    return report

if __name__ == "__main__":
    report = test_full_umsatzabgleich()
    
    print("\n" + "=" * 60)
    print("‚úÖ UMSATZABGLEICH ABGESCHLOSSEN")
    print("üöÄ System bereit f√ºr produktive Bank-Datenintegration!")
    print("üìä Empfehlung: W√∂chentlicher automatischer Import + Report")